// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Role {
  ADMIN
  USER
}

enum CourseStatus {
  CURSANDO
  PENDIENTE
  REGULARIZADA
  APROBADA
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  role           Role      @default(USER)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  accounts       Account[]
  sessions       Session[]
  courses        UserCourse[]
  careers        UserCareer[]
}

model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Career {
  id      Int      @id
  name    String
  periods Period[]
  users   UserCareer[]

  @@unique([name])
}

model Period {
  id         Int     @id
  order      Int
  careerID   Int
  courses    Course[]

  career     Career  @relation(fields: [careerID], references: [id], onDelete: Cascade)

  @@unique([order, careerID])
  @@index([careerID])
}

model Course {
  id              Int      @id
  order           Int
  name            String
  area            String?
  description     String?
  hsWeekly        Int?
  hsTotal         Int?
  hasCorrelatives Boolean  @default(false)
  hasOptatives    Boolean  @default(false)
  hasEquivalents  Boolean  @default(false)

  progress          UserCourse[]
  periods          Period[]
  @@unique([name])
}

model UserCourse {
  id               String       @id @default(cuid())
  courseId         Int
  userId           String
  qualification    Int?
  status           CourseStatus @default(PENDIENTE)

  course           Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user             User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([courseId, userId])
  @@index([userId])
}

model UserCareer {
  id         String       @id @default(cuid())
  userId     String
  careerId   Int

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  career     Career   @relation(fields: [careerId], references: [id], onDelete: Cascade)
  @@unique([userId, careerId])
  @@index([careerId])
}